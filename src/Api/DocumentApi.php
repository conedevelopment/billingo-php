<?php

/**
 * DocumentApi
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billingo API v3
 *
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\Billingo\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Cone\Billingo\ApiException;
use Cone\Billingo\Configuration;
use Cone\Billingo\HeaderSelector;
use Cone\Billingo\FormDataProcessor;
use Cone\Billingo\ObjectSerializer;

/**
 * DocumentApi Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'archiveDocument' => [
            'application/json',
        ],
        'cancelDocument' => [
            'application/json',
        ],
        'createDocument' => [
            'application/json',
        ],
        'createDocumentFromDraft' => [
            'application/json',
        ],
        'createDocumentFromProforma' => [
            'application/json',
        ],
        'createModificationDocument' => [
            'application/json',
        ],
        'createReceipt' => [
            'application/json',
        ],
        'createReceiptFromDraft' => [
            'application/json',
        ],
        'deleteDocument' => [
            'application/json',
        ],
        'deletePayment' => [
            'application/json',
        ],
        'documentCopy' => [
            'application/json',
        ],
        'downloadDocument' => [
            'application/json',
        ],
        'getDocument' => [
            'application/json',
        ],
        'getDocumentByVendorId' => [
            'application/json',
        ],
        'getOnlineSzamlaStatus' => [
            'application/json',
        ],
        'getPayment' => [
            'application/json',
        ],
        'getPublicUrl' => [
            'application/json',
        ],
        'listDocument' => [
            'application/json',
        ],
        'posPrint' => [
            'application/json',
        ],
        'sendDocument' => [
            'application/json',
        ],
        'updatePayment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation archiveDocument
     *
     * Archive a proforma document.
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function archiveDocument(
        int $id,
        string $contentType = self::contentTypes['archiveDocument'][0]
    ): \Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->archiveDocumentWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation archiveDocumentWithHttpInfo
     *
     * Archive a proforma document.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveDocumentWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['archiveDocument'][0]
    ): array {
        $request = $this->archiveDocumentRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation archiveDocumentAsync
     *
     * Archive a proforma document.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function archiveDocumentAsync(
        int $id,
        string $contentType = self::contentTypes['archiveDocument'][0]
    ): PromiseInterface {
        return $this->archiveDocumentAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveDocumentAsyncWithHttpInfo
     *
     * Archive a proforma document.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function archiveDocumentAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['archiveDocument'][0]
    ): PromiseInterface {
        $returnType = '';
        $request = $this->archiveDocumentRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveDocument'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function archiveDocumentRequest(
        int $id,
        string $contentType = self::contentTypes['archiveDocument'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling archiveDocument'
            );
        }


        $resourcePath = '/documents/{id}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelDocument
     *
     * Cancel a document
     *
     * @param  int $id id (required)
     * @param  \Cone\Billingo\Model\DocumentCancellation|null $documentCancellation Comment and notifiable email addresses - comma separated for multiple email addresses (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function cancelDocument(
        int $id,
        ?\Cone\Billingo\Model\DocumentCancellation $documentCancellation = null,
        string $contentType = self::contentTypes['cancelDocument'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->cancelDocumentWithHttpInfo($id, $documentCancellation, $contentType);
        return $response;
    }

    /**
     * Operation cancelDocumentWithHttpInfo
     *
     * Cancel a document
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\DocumentCancellation|null $documentCancellation Comment and notifiable email addresses - comma separated for multiple email addresses (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelDocumentWithHttpInfo(
        int $id,
        ?\Cone\Billingo\Model\DocumentCancellation $documentCancellation = null,
        string $contentType = self::contentTypes['cancelDocument'][0]
    ): array {
        $request = $this->cancelDocumentRequest($id, $documentCancellation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation cancelDocumentAsync
     *
     * Cancel a document
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\DocumentCancellation|null $documentCancellation Comment and notifiable email addresses - comma separated for multiple email addresses (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cancelDocumentAsync(
        int $id,
        ?\Cone\Billingo\Model\DocumentCancellation $documentCancellation = null,
        string $contentType = self::contentTypes['cancelDocument'][0]
    ): PromiseInterface {
        return $this->cancelDocumentAsyncWithHttpInfo($id, $documentCancellation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelDocumentAsyncWithHttpInfo
     *
     * Cancel a document
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\DocumentCancellation|null $documentCancellation Comment and notifiable email addresses - comma separated for multiple email addresses (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cancelDocumentAsyncWithHttpInfo(
        int $id,
        ?\Cone\Billingo\Model\DocumentCancellation $documentCancellation = null,
        string $contentType = self::contentTypes['cancelDocument'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->cancelDocumentRequest($id, $documentCancellation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelDocument'
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\DocumentCancellation|null $documentCancellation Comment and notifiable email addresses - comma separated for multiple email addresses (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelDocumentRequest(
        int $id,
        ?\Cone\Billingo\Model\DocumentCancellation $documentCancellation = null,
        string $contentType = self::contentTypes['cancelDocument'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling cancelDocument'
            );
        }



        $resourcePath = '/documents/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($documentCancellation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($documentCancellation));
            } else {
                $httpBody = $documentCancellation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDocument
     *
     * Create a document
     *
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function createDocument(
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocument'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->createDocumentWithHttpInfo($documentInsert, $contentType);
        return $response;
    }

    /**
     * Operation createDocumentWithHttpInfo
     *
     * Create a document
     *
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocumentWithHttpInfo(
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocument'][0]
    ): array {
        $request = $this->createDocumentRequest($documentInsert, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation createDocumentAsync
     *
     * Create a document
     *
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDocumentAsync(
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocument'][0]
    ): PromiseInterface {
        return $this->createDocumentAsyncWithHttpInfo($documentInsert, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDocumentAsyncWithHttpInfo
     *
     * Create a document
     *
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDocumentAsyncWithHttpInfo(
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocument'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->createDocumentRequest($documentInsert, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocument'
     *
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDocumentRequest(
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocument'][0]
    ): Request {

        // verify the required parameter 'documentInsert' is set
        if ($documentInsert === null || (is_array($documentInsert) && count($documentInsert) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $documentInsert when calling createDocument'
            );
        }


        $resourcePath = '/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($documentInsert)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($documentInsert));
            } else {
                $httpBody = $documentInsert;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDocumentFromDraft
     *
     * Converts a draft to an invoice.
     *
     * @param  int $id id (required)
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromDraft'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function createDocumentFromDraft(
        int $id,
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocumentFromDraft'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->createDocumentFromDraftWithHttpInfo($id, $documentInsert, $contentType);
        return $response;
    }

    /**
     * Operation createDocumentFromDraftWithHttpInfo
     *
     * Converts a draft to an invoice.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromDraft'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocumentFromDraftWithHttpInfo(
        int $id,
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocumentFromDraft'][0]
    ): array {
        $request = $this->createDocumentFromDraftRequest($id, $documentInsert, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation createDocumentFromDraftAsync
     *
     * Converts a draft to an invoice.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromDraft'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDocumentFromDraftAsync(
        int $id,
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocumentFromDraft'][0]
    ): PromiseInterface {
        return $this->createDocumentFromDraftAsyncWithHttpInfo($id, $documentInsert, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDocumentFromDraftAsyncWithHttpInfo
     *
     * Converts a draft to an invoice.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromDraft'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDocumentFromDraftAsyncWithHttpInfo(
        int $id,
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocumentFromDraft'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->createDocumentFromDraftRequest($id, $documentInsert, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocumentFromDraft'
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\DocumentInsert $documentInsert DocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromDraft'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDocumentFromDraftRequest(
        int $id,
        \Cone\Billingo\Model\DocumentInsert $documentInsert,
        string $contentType = self::contentTypes['createDocumentFromDraft'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling createDocumentFromDraft'
            );
        }

        // verify the required parameter 'documentInsert' is set
        if ($documentInsert === null || (is_array($documentInsert) && count($documentInsert) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $documentInsert when calling createDocumentFromDraft'
            );
        }


        $resourcePath = '/documents/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($documentInsert)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($documentInsert));
            } else {
                $httpBody = $documentInsert;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDocumentFromProforma
     *
     * Create a document from proforma.
     *
     * @param  int $id id (required)
     * @param  \Cone\Billingo\Model\InvoiceSettings|null $invoiceSettings InvoiceSettings object. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromProforma'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function createDocumentFromProforma(
        int $id,
        ?\Cone\Billingo\Model\InvoiceSettings $invoiceSettings = null,
        string $contentType = self::contentTypes['createDocumentFromProforma'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->createDocumentFromProformaWithHttpInfo($id, $invoiceSettings, $contentType);
        return $response;
    }

    /**
     * Operation createDocumentFromProformaWithHttpInfo
     *
     * Create a document from proforma.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\InvoiceSettings|null $invoiceSettings InvoiceSettings object. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromProforma'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocumentFromProformaWithHttpInfo(
        int $id,
        ?\Cone\Billingo\Model\InvoiceSettings $invoiceSettings = null,
        string $contentType = self::contentTypes['createDocumentFromProforma'][0]
    ): array {
        $request = $this->createDocumentFromProformaRequest($id, $invoiceSettings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation createDocumentFromProformaAsync
     *
     * Create a document from proforma.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\InvoiceSettings|null $invoiceSettings InvoiceSettings object. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromProforma'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDocumentFromProformaAsync(
        int $id,
        ?\Cone\Billingo\Model\InvoiceSettings $invoiceSettings = null,
        string $contentType = self::contentTypes['createDocumentFromProforma'][0]
    ): PromiseInterface {
        return $this->createDocumentFromProformaAsyncWithHttpInfo($id, $invoiceSettings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDocumentFromProformaAsyncWithHttpInfo
     *
     * Create a document from proforma.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\InvoiceSettings|null $invoiceSettings InvoiceSettings object. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromProforma'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createDocumentFromProformaAsyncWithHttpInfo(
        int $id,
        ?\Cone\Billingo\Model\InvoiceSettings $invoiceSettings = null,
        string $contentType = self::contentTypes['createDocumentFromProforma'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->createDocumentFromProformaRequest($id, $invoiceSettings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocumentFromProforma'
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\InvoiceSettings|null $invoiceSettings InvoiceSettings object. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocumentFromProforma'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDocumentFromProformaRequest(
        int $id,
        ?\Cone\Billingo\Model\InvoiceSettings $invoiceSettings = null,
        string $contentType = self::contentTypes['createDocumentFromProforma'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling createDocumentFromProforma'
            );
        }



        $resourcePath = '/documents/{id}/create-from-proforma';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoiceSettings)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoiceSettings));
            } else {
                $httpBody = $invoiceSettings;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createModificationDocument
     *
     * Create a modification document.
     *
     * @param  int $id id (required)
     * @param  \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert ModificationDocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModificationDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function createModificationDocument(
        int $id,
        \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert,
        string $contentType = self::contentTypes['createModificationDocument'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->createModificationDocumentWithHttpInfo($id, $modificationDocumentInsert, $contentType);
        return $response;
    }

    /**
     * Operation createModificationDocumentWithHttpInfo
     *
     * Create a modification document.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert ModificationDocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModificationDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createModificationDocumentWithHttpInfo(
        int $id,
        \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert,
        string $contentType = self::contentTypes['createModificationDocument'][0]
    ): array {
        $request = $this->createModificationDocumentRequest($id, $modificationDocumentInsert, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation createModificationDocumentAsync
     *
     * Create a modification document.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert ModificationDocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModificationDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createModificationDocumentAsync(
        int $id,
        \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert,
        string $contentType = self::contentTypes['createModificationDocument'][0]
    ): PromiseInterface {
        return $this->createModificationDocumentAsyncWithHttpInfo($id, $modificationDocumentInsert, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createModificationDocumentAsyncWithHttpInfo
     *
     * Create a modification document.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert ModificationDocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModificationDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createModificationDocumentAsyncWithHttpInfo(
        int $id,
        \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert,
        string $contentType = self::contentTypes['createModificationDocument'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->createModificationDocumentRequest($id, $modificationDocumentInsert, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createModificationDocument'
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert ModificationDocumentInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModificationDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createModificationDocumentRequest(
        int $id,
        \Cone\Billingo\Model\ModificationDocumentInsert $modificationDocumentInsert,
        string $contentType = self::contentTypes['createModificationDocument'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling createModificationDocument'
            );
        }

        // verify the required parameter 'modificationDocumentInsert' is set
        if ($modificationDocumentInsert === null || (is_array($modificationDocumentInsert) && count($modificationDocumentInsert) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $modificationDocumentInsert when calling createModificationDocument'
            );
        }


        $resourcePath = '/documents/{id}/create-modification-document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modificationDocumentInsert)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($modificationDocumentInsert));
            } else {
                $httpBody = $modificationDocumentInsert;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReceipt
     *
     * Create a receipt
     *
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceipt'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function createReceipt(
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceipt'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->createReceiptWithHttpInfo($receiptInsert, $contentType);
        return $response;
    }

    /**
     * Operation createReceiptWithHttpInfo
     *
     * Create a receipt
     *
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceipt'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createReceiptWithHttpInfo(
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceipt'][0]
    ): array {
        $request = $this->createReceiptRequest($receiptInsert, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation createReceiptAsync
     *
     * Create a receipt
     *
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceipt'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createReceiptAsync(
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceipt'][0]
    ): PromiseInterface {
        return $this->createReceiptAsyncWithHttpInfo($receiptInsert, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createReceiptAsyncWithHttpInfo
     *
     * Create a receipt
     *
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceipt'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createReceiptAsyncWithHttpInfo(
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceipt'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->createReceiptRequest($receiptInsert, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReceipt'
     *
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceipt'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createReceiptRequest(
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceipt'][0]
    ): Request {

        // verify the required parameter 'receiptInsert' is set
        if ($receiptInsert === null || (is_array($receiptInsert) && count($receiptInsert) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $receiptInsert when calling createReceipt'
            );
        }


        $resourcePath = '/documents/receipt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($receiptInsert)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($receiptInsert));
            } else {
                $httpBody = $receiptInsert;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReceiptFromDraft
     *
     * Converts a draft to a receipt.
     *
     * @param  int $id id (required)
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceiptFromDraft'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function createReceiptFromDraft(
        int $id,
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceiptFromDraft'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->createReceiptFromDraftWithHttpInfo($id, $receiptInsert, $contentType);
        return $response;
    }

    /**
     * Operation createReceiptFromDraftWithHttpInfo
     *
     * Converts a draft to a receipt.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceiptFromDraft'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createReceiptFromDraftWithHttpInfo(
        int $id,
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceiptFromDraft'][0]
    ): array {
        $request = $this->createReceiptFromDraftRequest($id, $receiptInsert, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation createReceiptFromDraftAsync
     *
     * Converts a draft to a receipt.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceiptFromDraft'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createReceiptFromDraftAsync(
        int $id,
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceiptFromDraft'][0]
    ): PromiseInterface {
        return $this->createReceiptFromDraftAsyncWithHttpInfo($id, $receiptInsert, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createReceiptFromDraftAsyncWithHttpInfo
     *
     * Converts a draft to a receipt.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceiptFromDraft'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createReceiptFromDraftAsyncWithHttpInfo(
        int $id,
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceiptFromDraft'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->createReceiptFromDraftRequest($id, $receiptInsert, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReceiptFromDraft'
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\ReceiptInsert $receiptInsert ReceiptInsert object that you would like to store. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReceiptFromDraft'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createReceiptFromDraftRequest(
        int $id,
        \Cone\Billingo\Model\ReceiptInsert $receiptInsert,
        string $contentType = self::contentTypes['createReceiptFromDraft'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling createReceiptFromDraft'
            );
        }

        // verify the required parameter 'receiptInsert' is set
        if ($receiptInsert === null || (is_array($receiptInsert) && count($receiptInsert) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $receiptInsert when calling createReceiptFromDraft'
            );
        }


        $resourcePath = '/documents/receipt/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($receiptInsert)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($receiptInsert));
            } else {
                $httpBody = $receiptInsert;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDocument
     *
     * Delete a draft.
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function deleteDocument(
        int $id,
        string $contentType = self::contentTypes['deleteDocument'][0]
    ): \Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->deleteDocumentWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation deleteDocumentWithHttpInfo
     *
     * Delete a draft.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDocumentWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['deleteDocument'][0]
    ): array {
        $request = $this->deleteDocumentRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteDocumentAsync
     *
     * Delete a draft.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteDocumentAsync(
        int $id,
        string $contentType = self::contentTypes['deleteDocument'][0]
    ): PromiseInterface {
        return $this->deleteDocumentAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDocumentAsyncWithHttpInfo
     *
     * Delete a draft.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteDocumentAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['deleteDocument'][0]
    ): PromiseInterface {
        $returnType = '';
        $request = $this->deleteDocumentRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDocument'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDocumentRequest(
        int $id,
        string $contentType = self::contentTypes['deleteDocument'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDocument'
            );
        }


        $resourcePath = '/documents/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePayment
     *
     * Delete all payment history on document
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\PaymentHistory[]|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function deletePayment(
        int $id,
        string $contentType = self::contentTypes['deletePayment'][0]
    ): array|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->deletePaymentWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation deletePaymentWithHttpInfo
     *
     * Delete all payment history on document
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\PaymentHistory[]|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaymentWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['deletePayment'][0]
    ): array {
        $request = $this->deletePaymentRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\PaymentHistory[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\PaymentHistory[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\PaymentHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePaymentAsync
     *
     * Delete all payment history on document
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePaymentAsync(
        int $id,
        string $contentType = self::contentTypes['deletePayment'][0]
    ): PromiseInterface {
        return $this->deletePaymentAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaymentAsyncWithHttpInfo
     *
     * Delete all payment history on document
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePaymentAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['deletePayment'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\PaymentHistory[]';
        $request = $this->deletePaymentRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePayment'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePayment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePaymentRequest(
        int $id,
        string $contentType = self::contentTypes['deletePayment'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deletePayment'
            );
        }


        $resourcePath = '/documents/{id}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation documentCopy
     *
     * Copy a document
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function documentCopy(
        int $id,
        string $contentType = self::contentTypes['documentCopy'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->documentCopyWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation documentCopyWithHttpInfo
     *
     * Copy a document
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopy'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function documentCopyWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['documentCopy'][0]
    ): array {
        $request = $this->documentCopyRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation documentCopyAsync
     *
     * Copy a document
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function documentCopyAsync(
        int $id,
        string $contentType = self::contentTypes['documentCopy'][0]
    ): PromiseInterface {
        return $this->documentCopyAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation documentCopyAsyncWithHttpInfo
     *
     * Copy a document
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function documentCopyAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['documentCopy'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->documentCopyRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'documentCopy'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['documentCopy'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function documentCopyRequest(
        int $id,
        string $contentType = self::contentTypes['documentCopy'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling documentCopy'
            );
        }


        $resourcePath = '/documents/{id}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadDocument
     *
     * Download a document in PDF format.
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SplFileObject|\Cone\Billingo\Model\ClientError|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function downloadDocument(
        int $id,
        string $contentType = self::contentTypes['downloadDocument'][0]
    ): \SplFileObject|\Cone\Billingo\Model\ClientError|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->downloadDocumentWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation downloadDocumentWithHttpInfo
     *
     * Download a document in PDF format.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SplFileObject|\Cone\Billingo\Model\ClientError|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadDocumentWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['downloadDocument'][0]
    ): array {
        $request = $this->downloadDocumentRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                case 202:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientError',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation downloadDocumentAsync
     *
     * Download a document in PDF format.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function downloadDocumentAsync(
        int $id,
        string $contentType = self::contentTypes['downloadDocument'][0]
    ): PromiseInterface {
        return $this->downloadDocumentAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadDocumentAsyncWithHttpInfo
     *
     * Download a document in PDF format.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function downloadDocumentAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['downloadDocument'][0]
    ): PromiseInterface {
        $returnType = '\SplFileObject';
        $request = $this->downloadDocumentRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadDocument'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadDocumentRequest(
        int $id,
        string $contentType = self::contentTypes['downloadDocument'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling downloadDocument'
            );
        }


        $resourcePath = '/documents/{id}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocument
     *
     * Retrieve a document
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function getDocument(
        int $id,
        string $contentType = self::contentTypes['getDocument'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->getDocumentWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getDocumentWithHttpInfo
     *
     * Retrieve a document
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getDocument'][0]
    ): array {
        $request = $this->getDocumentRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocumentAsync
     *
     * Retrieve a document
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDocumentAsync(
        int $id,
        string $contentType = self::contentTypes['getDocument'][0]
    ): PromiseInterface {
        return $this->getDocumentAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentAsyncWithHttpInfo
     *
     * Retrieve a document
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDocumentAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getDocument'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->getDocumentRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocument'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentRequest(
        int $id,
        string $contentType = self::contentTypes['getDocument'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getDocument'
            );
        }


        $resourcePath = '/documents/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentByVendorId
     *
     * Retrieve a document by vendor id
     *
     * @param  string $vendorId vendorId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentByVendorId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function getDocumentByVendorId(
        string $vendorId,
        string $contentType = self::contentTypes['getDocumentByVendorId'][0]
    ): \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->getDocumentByVendorIdWithHttpInfo($vendorId, $contentType);
        return $response;
    }

    /**
     * Operation getDocumentByVendorIdWithHttpInfo
     *
     * Retrieve a document by vendor id
     *
     * @param  string $vendorId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentByVendorId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\Document|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentByVendorIdWithHttpInfo(
        string $vendorId,
        string $contentType = self::contentTypes['getDocumentByVendorId'][0]
    ): array {
        $request = $this->getDocumentByVendorIdRequest($vendorId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\Document',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\Document',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocumentByVendorIdAsync
     *
     * Retrieve a document by vendor id
     *
     * @param  string $vendorId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentByVendorId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDocumentByVendorIdAsync(
        string $vendorId,
        string $contentType = self::contentTypes['getDocumentByVendorId'][0]
    ): PromiseInterface {
        return $this->getDocumentByVendorIdAsyncWithHttpInfo($vendorId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentByVendorIdAsyncWithHttpInfo
     *
     * Retrieve a document by vendor id
     *
     * @param  string $vendorId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentByVendorId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getDocumentByVendorIdAsyncWithHttpInfo(
        string $vendorId,
        string $contentType = self::contentTypes['getDocumentByVendorId'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\Document';
        $request = $this->getDocumentByVendorIdRequest($vendorId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentByVendorId'
     *
     * @param  string $vendorId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentByVendorId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentByVendorIdRequest(
        string $vendorId,
        string $contentType = self::contentTypes['getDocumentByVendorId'][0]
    ): Request {

        // verify the required parameter 'vendorId' is set
        if ($vendorId === null || (is_array($vendorId) && count($vendorId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $vendorId when calling getDocumentByVendorId'
            );
        }


        $resourcePath = '/documents/vendor/{vendor_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($vendorId !== null) {
            $resourcePath = str_replace(
                '{' . 'vendor_id' . '}',
                ObjectSerializer::toPathValue($vendorId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOnlineSzamlaStatus
     *
     * Retrieve a document Online Számla status
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOnlineSzamlaStatus'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\OnlineSzamlaStatus|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function getOnlineSzamlaStatus(
        int $id,
        string $contentType = self::contentTypes['getOnlineSzamlaStatus'][0]
    ): \Cone\Billingo\Model\OnlineSzamlaStatus|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->getOnlineSzamlaStatusWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getOnlineSzamlaStatusWithHttpInfo
     *
     * Retrieve a document Online Számla status
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOnlineSzamlaStatus'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\OnlineSzamlaStatus|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOnlineSzamlaStatusWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getOnlineSzamlaStatus'][0]
    ): array {
        $request = $this->getOnlineSzamlaStatusRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\OnlineSzamlaStatus',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\OnlineSzamlaStatus',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\OnlineSzamlaStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getOnlineSzamlaStatusAsync
     *
     * Retrieve a document Online Számla status
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOnlineSzamlaStatus'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOnlineSzamlaStatusAsync(
        int $id,
        string $contentType = self::contentTypes['getOnlineSzamlaStatus'][0]
    ): PromiseInterface {
        return $this->getOnlineSzamlaStatusAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOnlineSzamlaStatusAsyncWithHttpInfo
     *
     * Retrieve a document Online Számla status
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOnlineSzamlaStatus'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOnlineSzamlaStatusAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getOnlineSzamlaStatus'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\OnlineSzamlaStatus';
        $request = $this->getOnlineSzamlaStatusRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOnlineSzamlaStatus'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOnlineSzamlaStatus'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOnlineSzamlaStatusRequest(
        int $id,
        string $contentType = self::contentTypes['getOnlineSzamlaStatus'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getOnlineSzamlaStatus'
            );
        }


        $resourcePath = '/documents/{id}/online-szamla';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayment
     *
     * Retrieve a payment histroy
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\PaymentHistory[]|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function getPayment(
        int $id,
        string $contentType = self::contentTypes['getPayment'][0]
    ): array|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->getPaymentWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentWithHttpInfo
     *
     * Retrieve a payment histroy
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\PaymentHistory[]|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getPayment'][0]
    ): array {
        $request = $this->getPaymentRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\PaymentHistory[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\PaymentHistory[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\PaymentHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getPaymentAsync
     *
     * Retrieve a payment histroy
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPaymentAsync(
        int $id,
        string $contentType = self::contentTypes['getPayment'][0]
    ): PromiseInterface {
        return $this->getPaymentAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentAsyncWithHttpInfo
     *
     * Retrieve a payment histroy
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPaymentAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getPayment'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\PaymentHistory[]';
        $request = $this->getPaymentRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayment'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentRequest(
        int $id,
        string $contentType = self::contentTypes['getPayment'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPayment'
            );
        }


        $resourcePath = '/documents/{id}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPublicUrl
     *
     * Retrieve a document download public url.
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicUrl'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\DocumentPublicUrl|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function getPublicUrl(
        int $id,
        string $contentType = self::contentTypes['getPublicUrl'][0]
    ): \Cone\Billingo\Model\DocumentPublicUrl|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->getPublicUrlWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getPublicUrlWithHttpInfo
     *
     * Retrieve a document download public url.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicUrl'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\DocumentPublicUrl|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPublicUrlWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getPublicUrl'][0]
    ): array {
        $request = $this->getPublicUrlRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\DocumentPublicUrl',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\DocumentPublicUrl',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\DocumentPublicUrl',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getPublicUrlAsync
     *
     * Retrieve a document download public url.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicUrl'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPublicUrlAsync(
        int $id,
        string $contentType = self::contentTypes['getPublicUrl'][0]
    ): PromiseInterface {
        return $this->getPublicUrlAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPublicUrlAsyncWithHttpInfo
     *
     * Retrieve a document download public url.
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicUrl'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPublicUrlAsyncWithHttpInfo(
        int $id,
        string $contentType = self::contentTypes['getPublicUrl'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\DocumentPublicUrl';
        $request = $this->getPublicUrlRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPublicUrl'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicUrl'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPublicUrlRequest(
        int $id,
        string $contentType = self::contentTypes['getPublicUrl'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPublicUrl'
            );
        }


        $resourcePath = '/documents/{id}/public-url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDocument
     *
     * List all documents
     *
     * @param  int|null $page page (optional)
     * @param  int|null $perPage perPage (optional, default to 25)
     * @param  int|null $blockId Filter documents by the identifier of your DocumentBlock. (optional)
     * @param  int|null $partnerId Filter documents by the identifier of your Partner. (optional)
     * @param  \Cone\Billingo\Model\PaymentMethod|null $paymentMethod Filter documents by PaymentMethod value. (optional)
     * @param  \Cone\Billingo\Model\PaymentStatus|null $paymentStatus Filter documents by PaymentStatus value. (optional)
     * @param  \DateTime|null $startDate Filter documents by their invoice date. (optional)
     * @param  \DateTime|null $endDate Filter documents by their invoice date. (optional)
     * @param  int|null $startNumber Starting number of the document, should not contain year or any other formatting. Required if &#x60;start_year&#x60; given (optional)
     * @param  int|null $endNumber Ending number of the document, should not contain year or any other formatting. Required if &#x60;end_year&#x60; given (optional)
     * @param  int|null $startYear Year for &#x60;start_number&#x60; parameter. Required if &#x60;start_number&#x60; given. (optional)
     * @param  int|null $endYear Year for &#x60;end_number&#x60; parameter. Required if &#x60;end_number&#x60; given. (optional)
     * @param  \Cone\Billingo\Model\DocumentType|null $type Filter documents by type (optional)
     * @param  string|null $query Filter documents by the given text (optional)
     * @param  \DateTime|null $paidStartDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $paidEndDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $fulfillmentStartDate Filter documents by their fulfillment date. (optional)
     * @param  \DateTime|null $fulfillmentEndDate Filter documents by their fulfillment date. (optional)
     * @param  string|null $lastModifiedDate Filter documents by their last modified date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\DocumentList|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function listDocument(
        ?int $page = null,
        ?int $perPage = 25,
        ?int $blockId = null,
        ?int $partnerId = null,
        ?\Cone\Billingo\Model\PaymentMethod $paymentMethod = null,
        ?\Cone\Billingo\Model\PaymentStatus $paymentStatus = null,
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $startNumber = null,
        ?int $endNumber = null,
        ?int $startYear = null,
        ?int $endYear = null,
        ?\Cone\Billingo\Model\DocumentType $type = null,
        ?string $query = null,
        ?\DateTime $paidStartDate = null,
        ?\DateTime $paidEndDate = null,
        ?\DateTime $fulfillmentStartDate = null,
        ?\DateTime $fulfillmentEndDate = null,
        ?string $lastModifiedDate = null,
        string $contentType = self::contentTypes['listDocument'][0]
    ): \Cone\Billingo\Model\DocumentList|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->listDocumentWithHttpInfo($page, $perPage, $blockId, $partnerId, $paymentMethod, $paymentStatus, $startDate, $endDate, $startNumber, $endNumber, $startYear, $endYear, $type, $query, $paidStartDate, $paidEndDate, $fulfillmentStartDate, $fulfillmentEndDate, $lastModifiedDate, $contentType);
        return $response;
    }

    /**
     * Operation listDocumentWithHttpInfo
     *
     * List all documents
     *
     * @param  int|null $page (optional)
     * @param  int|null $perPage (optional, default to 25)
     * @param  int|null $blockId Filter documents by the identifier of your DocumentBlock. (optional)
     * @param  int|null $partnerId Filter documents by the identifier of your Partner. (optional)
     * @param  \Cone\Billingo\Model\PaymentMethod|null $paymentMethod Filter documents by PaymentMethod value. (optional)
     * @param  \Cone\Billingo\Model\PaymentStatus|null $paymentStatus Filter documents by PaymentStatus value. (optional)
     * @param  \DateTime|null $startDate Filter documents by their invoice date. (optional)
     * @param  \DateTime|null $endDate Filter documents by their invoice date. (optional)
     * @param  int|null $startNumber Starting number of the document, should not contain year or any other formatting. Required if &#x60;start_year&#x60; given (optional)
     * @param  int|null $endNumber Ending number of the document, should not contain year or any other formatting. Required if &#x60;end_year&#x60; given (optional)
     * @param  int|null $startYear Year for &#x60;start_number&#x60; parameter. Required if &#x60;start_number&#x60; given. (optional)
     * @param  int|null $endYear Year for &#x60;end_number&#x60; parameter. Required if &#x60;end_number&#x60; given. (optional)
     * @param  \Cone\Billingo\Model\DocumentType|null $type Filter documents by type (optional)
     * @param  string|null $query Filter documents by the given text (optional)
     * @param  \DateTime|null $paidStartDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $paidEndDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $fulfillmentStartDate Filter documents by their fulfillment date. (optional)
     * @param  \DateTime|null $fulfillmentEndDate Filter documents by their fulfillment date. (optional)
     * @param  string|null $lastModifiedDate Filter documents by their last modified date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\DocumentList|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDocumentWithHttpInfo(
        ?int $page = null,
        ?int $perPage = 25,
        ?int $blockId = null,
        ?int $partnerId = null,
        ?\Cone\Billingo\Model\PaymentMethod $paymentMethod = null,
        ?\Cone\Billingo\Model\PaymentStatus $paymentStatus = null,
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $startNumber = null,
        ?int $endNumber = null,
        ?int $startYear = null,
        ?int $endYear = null,
        ?\Cone\Billingo\Model\DocumentType $type = null,
        ?string $query = null,
        ?\DateTime $paidStartDate = null,
        ?\DateTime $paidEndDate = null,
        ?\DateTime $fulfillmentStartDate = null,
        ?\DateTime $fulfillmentEndDate = null,
        ?string $lastModifiedDate = null,
        string $contentType = self::contentTypes['listDocument'][0]
    ): array {
        $request = $this->listDocumentRequest($page, $perPage, $blockId, $partnerId, $paymentMethod, $paymentStatus, $startDate, $endDate, $startNumber, $endNumber, $startYear, $endYear, $type, $query, $paidStartDate, $paidEndDate, $fulfillmentStartDate, $fulfillmentEndDate, $lastModifiedDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\DocumentList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\DocumentList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\DocumentList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation listDocumentAsync
     *
     * List all documents
     *
     * @param  int|null $page (optional)
     * @param  int|null $perPage (optional, default to 25)
     * @param  int|null $blockId Filter documents by the identifier of your DocumentBlock. (optional)
     * @param  int|null $partnerId Filter documents by the identifier of your Partner. (optional)
     * @param  \Cone\Billingo\Model\PaymentMethod|null $paymentMethod Filter documents by PaymentMethod value. (optional)
     * @param  \Cone\Billingo\Model\PaymentStatus|null $paymentStatus Filter documents by PaymentStatus value. (optional)
     * @param  \DateTime|null $startDate Filter documents by their invoice date. (optional)
     * @param  \DateTime|null $endDate Filter documents by their invoice date. (optional)
     * @param  int|null $startNumber Starting number of the document, should not contain year or any other formatting. Required if &#x60;start_year&#x60; given (optional)
     * @param  int|null $endNumber Ending number of the document, should not contain year or any other formatting. Required if &#x60;end_year&#x60; given (optional)
     * @param  int|null $startYear Year for &#x60;start_number&#x60; parameter. Required if &#x60;start_number&#x60; given. (optional)
     * @param  int|null $endYear Year for &#x60;end_number&#x60; parameter. Required if &#x60;end_number&#x60; given. (optional)
     * @param  \Cone\Billingo\Model\DocumentType|null $type Filter documents by type (optional)
     * @param  string|null $query Filter documents by the given text (optional)
     * @param  \DateTime|null $paidStartDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $paidEndDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $fulfillmentStartDate Filter documents by their fulfillment date. (optional)
     * @param  \DateTime|null $fulfillmentEndDate Filter documents by their fulfillment date. (optional)
     * @param  string|null $lastModifiedDate Filter documents by their last modified date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listDocumentAsync(
        ?int $page = null,
        ?int $perPage = 25,
        ?int $blockId = null,
        ?int $partnerId = null,
        ?\Cone\Billingo\Model\PaymentMethod $paymentMethod = null,
        ?\Cone\Billingo\Model\PaymentStatus $paymentStatus = null,
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $startNumber = null,
        ?int $endNumber = null,
        ?int $startYear = null,
        ?int $endYear = null,
        ?\Cone\Billingo\Model\DocumentType $type = null,
        ?string $query = null,
        ?\DateTime $paidStartDate = null,
        ?\DateTime $paidEndDate = null,
        ?\DateTime $fulfillmentStartDate = null,
        ?\DateTime $fulfillmentEndDate = null,
        ?string $lastModifiedDate = null,
        string $contentType = self::contentTypes['listDocument'][0]
    ): PromiseInterface {
        return $this->listDocumentAsyncWithHttpInfo($page, $perPage, $blockId, $partnerId, $paymentMethod, $paymentStatus, $startDate, $endDate, $startNumber, $endNumber, $startYear, $endYear, $type, $query, $paidStartDate, $paidEndDate, $fulfillmentStartDate, $fulfillmentEndDate, $lastModifiedDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDocumentAsyncWithHttpInfo
     *
     * List all documents
     *
     * @param  int|null $page (optional)
     * @param  int|null $perPage (optional, default to 25)
     * @param  int|null $blockId Filter documents by the identifier of your DocumentBlock. (optional)
     * @param  int|null $partnerId Filter documents by the identifier of your Partner. (optional)
     * @param  \Cone\Billingo\Model\PaymentMethod|null $paymentMethod Filter documents by PaymentMethod value. (optional)
     * @param  \Cone\Billingo\Model\PaymentStatus|null $paymentStatus Filter documents by PaymentStatus value. (optional)
     * @param  \DateTime|null $startDate Filter documents by their invoice date. (optional)
     * @param  \DateTime|null $endDate Filter documents by their invoice date. (optional)
     * @param  int|null $startNumber Starting number of the document, should not contain year or any other formatting. Required if &#x60;start_year&#x60; given (optional)
     * @param  int|null $endNumber Ending number of the document, should not contain year or any other formatting. Required if &#x60;end_year&#x60; given (optional)
     * @param  int|null $startYear Year for &#x60;start_number&#x60; parameter. Required if &#x60;start_number&#x60; given. (optional)
     * @param  int|null $endYear Year for &#x60;end_number&#x60; parameter. Required if &#x60;end_number&#x60; given. (optional)
     * @param  \Cone\Billingo\Model\DocumentType|null $type Filter documents by type (optional)
     * @param  string|null $query Filter documents by the given text (optional)
     * @param  \DateTime|null $paidStartDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $paidEndDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $fulfillmentStartDate Filter documents by their fulfillment date. (optional)
     * @param  \DateTime|null $fulfillmentEndDate Filter documents by their fulfillment date. (optional)
     * @param  string|null $lastModifiedDate Filter documents by their last modified date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listDocumentAsyncWithHttpInfo(
        ?int $page = null,
        ?int $perPage = 25,
        ?int $blockId = null,
        ?int $partnerId = null,
        ?\Cone\Billingo\Model\PaymentMethod $paymentMethod = null,
        ?\Cone\Billingo\Model\PaymentStatus $paymentStatus = null,
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $startNumber = null,
        ?int $endNumber = null,
        ?int $startYear = null,
        ?int $endYear = null,
        ?\Cone\Billingo\Model\DocumentType $type = null,
        ?string $query = null,
        ?\DateTime $paidStartDate = null,
        ?\DateTime $paidEndDate = null,
        ?\DateTime $fulfillmentStartDate = null,
        ?\DateTime $fulfillmentEndDate = null,
        ?string $lastModifiedDate = null,
        string $contentType = self::contentTypes['listDocument'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\DocumentList';
        $request = $this->listDocumentRequest($page, $perPage, $blockId, $partnerId, $paymentMethod, $paymentStatus, $startDate, $endDate, $startNumber, $endNumber, $startYear, $endYear, $type, $query, $paidStartDate, $paidEndDate, $fulfillmentStartDate, $fulfillmentEndDate, $lastModifiedDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDocument'
     *
     * @param  int|null $page (optional)
     * @param  int|null $perPage (optional, default to 25)
     * @param  int|null $blockId Filter documents by the identifier of your DocumentBlock. (optional)
     * @param  int|null $partnerId Filter documents by the identifier of your Partner. (optional)
     * @param  \Cone\Billingo\Model\PaymentMethod|null $paymentMethod Filter documents by PaymentMethod value. (optional)
     * @param  \Cone\Billingo\Model\PaymentStatus|null $paymentStatus Filter documents by PaymentStatus value. (optional)
     * @param  \DateTime|null $startDate Filter documents by their invoice date. (optional)
     * @param  \DateTime|null $endDate Filter documents by their invoice date. (optional)
     * @param  int|null $startNumber Starting number of the document, should not contain year or any other formatting. Required if &#x60;start_year&#x60; given (optional)
     * @param  int|null $endNumber Ending number of the document, should not contain year or any other formatting. Required if &#x60;end_year&#x60; given (optional)
     * @param  int|null $startYear Year for &#x60;start_number&#x60; parameter. Required if &#x60;start_number&#x60; given. (optional)
     * @param  int|null $endYear Year for &#x60;end_number&#x60; parameter. Required if &#x60;end_number&#x60; given. (optional)
     * @param  \Cone\Billingo\Model\DocumentType|null $type Filter documents by type (optional)
     * @param  string|null $query Filter documents by the given text (optional)
     * @param  \DateTime|null $paidStartDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $paidEndDate Filter documents by their payment date. (optional)
     * @param  \DateTime|null $fulfillmentStartDate Filter documents by their fulfillment date. (optional)
     * @param  \DateTime|null $fulfillmentEndDate Filter documents by their fulfillment date. (optional)
     * @param  string|null $lastModifiedDate Filter documents by their last modified date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDocumentRequest(
        ?int $page = null,
        ?int $perPage = 25,
        ?int $blockId = null,
        ?int $partnerId = null,
        ?\Cone\Billingo\Model\PaymentMethod $paymentMethod = null,
        ?\Cone\Billingo\Model\PaymentStatus $paymentStatus = null,
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $startNumber = null,
        ?int $endNumber = null,
        ?int $startYear = null,
        ?int $endYear = null,
        ?\Cone\Billingo\Model\DocumentType $type = null,
        ?string $query = null,
        ?\DateTime $paidStartDate = null,
        ?\DateTime $paidEndDate = null,
        ?\DateTime $fulfillmentStartDate = null,
        ?\DateTime $fulfillmentEndDate = null,
        ?string $lastModifiedDate = null,
        string $contentType = self::contentTypes['listDocument'][0]
    ): Request {


        if ($perPage !== null && $perPage > 100) {
            throw new InvalidArgumentException('invalid value for "$perPage" when calling DocumentApi.listDocument, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new InvalidArgumentException('invalid value for "$perPage" when calling DocumentApi.listDocument, must be bigger than or equal to 1.');
        }



















        $resourcePath = '/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $perPage,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $blockId,
            'block_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $partnerId,
            'partner_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentMethod?->value,
            'payment_method', // param base name
            'PaymentMethod', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentStatus?->value,
            'payment_status', // param base name
            'PaymentStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startNumber,
            'start_number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endNumber,
            'end_number', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startYear,
            'start_year', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endYear,
            'end_year', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type?->value,
            'type', // param base name
            'DocumentType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paidStartDate,
            'paid_start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paidEndDate,
            'paid_end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentStartDate,
            'fulfillment_start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillmentEndDate,
            'fulfillment_end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastModifiedDate,
            'last_modified_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation posPrint
     *
     * Returns a printable POS PDF
     *
     * @param  int $id id (required)
     * @param  float $size In which size the POS PDF should be rendered. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['posPrint'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SplFileObject|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function posPrint(
        int $id,
        float $size,
        string $contentType = self::contentTypes['posPrint'][0]
    ): \SplFileObject|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->posPrintWithHttpInfo($id, $size, $contentType);
        return $response;
    }

    /**
     * Operation posPrintWithHttpInfo
     *
     * Returns a printable POS PDF
     *
     * @param  int $id (required)
     * @param  float $size In which size the POS PDF should be rendered. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['posPrint'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SplFileObject|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function posPrintWithHttpInfo(
        int $id,
        float $size,
        string $contentType = self::contentTypes['posPrint'][0]
    ): array {
        $request = $this->posPrintRequest($id, $size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation posPrintAsync
     *
     * Returns a printable POS PDF
     *
     * @param  int $id (required)
     * @param  float $size In which size the POS PDF should be rendered. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['posPrint'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function posPrintAsync(
        int $id,
        float $size,
        string $contentType = self::contentTypes['posPrint'][0]
    ): PromiseInterface {
        return $this->posPrintAsyncWithHttpInfo($id, $size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation posPrintAsyncWithHttpInfo
     *
     * Returns a printable POS PDF
     *
     * @param  int $id (required)
     * @param  float $size In which size the POS PDF should be rendered. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['posPrint'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function posPrintAsyncWithHttpInfo(
        int $id,
        float $size,
        string $contentType = self::contentTypes['posPrint'][0]
    ): PromiseInterface {
        $returnType = '\SplFileObject';
        $request = $this->posPrintRequest($id, $size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'posPrint'
     *
     * @param  int $id (required)
     * @param  float $size In which size the POS PDF should be rendered. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['posPrint'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function posPrintRequest(
        int $id,
        float $size,
        string $contentType = self::contentTypes['posPrint'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling posPrint'
            );
        }

        // verify the required parameter 'size' is set
        if ($size === null || (is_array($size) && count($size) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $size when calling posPrint'
            );
        }


        $resourcePath = '/documents/{id}/print/pos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendDocument
     *
     * Send invoice to given email adresses.
     *
     * @param  int $id id (required)
     * @param  \Cone\Billingo\Model\SendDocument|null $sendDocument List of email-s where you want to send the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\SendDocument|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function sendDocument(
        int $id,
        ?\Cone\Billingo\Model\SendDocument $sendDocument = null,
        string $contentType = self::contentTypes['sendDocument'][0]
    ): \Cone\Billingo\Model\SendDocument|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->sendDocumentWithHttpInfo($id, $sendDocument, $contentType);
        return $response;
    }

    /**
     * Operation sendDocumentWithHttpInfo
     *
     * Send invoice to given email adresses.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\SendDocument|null $sendDocument List of email-s where you want to send the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendDocument'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\SendDocument|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendDocumentWithHttpInfo(
        int $id,
        ?\Cone\Billingo\Model\SendDocument $sendDocument = null,
        string $contentType = self::contentTypes['sendDocument'][0]
    ): array {
        $request = $this->sendDocumentRequest($id, $sendDocument, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SendDocument',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\SendDocument',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SendDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation sendDocumentAsync
     *
     * Send invoice to given email adresses.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\SendDocument|null $sendDocument List of email-s where you want to send the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sendDocumentAsync(
        int $id,
        ?\Cone\Billingo\Model\SendDocument $sendDocument = null,
        string $contentType = self::contentTypes['sendDocument'][0]
    ): PromiseInterface {
        return $this->sendDocumentAsyncWithHttpInfo($id, $sendDocument, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendDocumentAsyncWithHttpInfo
     *
     * Send invoice to given email adresses.
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\SendDocument|null $sendDocument List of email-s where you want to send the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sendDocumentAsyncWithHttpInfo(
        int $id,
        ?\Cone\Billingo\Model\SendDocument $sendDocument = null,
        string $contentType = self::contentTypes['sendDocument'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\SendDocument';
        $request = $this->sendDocumentRequest($id, $sendDocument, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendDocument'
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\SendDocument|null $sendDocument List of email-s where you want to send the invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendDocument'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendDocumentRequest(
        int $id,
        ?\Cone\Billingo\Model\SendDocument $sendDocument = null,
        string $contentType = self::contentTypes['sendDocument'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling sendDocument'
            );
        }



        $resourcePath = '/documents/{id}/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sendDocument)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sendDocument));
            } else {
                $httpBody = $sendDocument;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePayment
     *
     * Update payment history
     *
     * @param  int $id id (required)
     * @param  \Cone\Billingo\Model\PaymentHistory[] $paymentHistory Payment history object that you would like to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\Billingo\Model\PaymentHistory[]|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse
     */
    public function updatePayment(
        int $id,
        array $paymentHistory,
        string $contentType = self::contentTypes['updatePayment'][0]
    ): array|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse {
        list($response) = $this->updatePaymentWithHttpInfo($id, $paymentHistory, $contentType);
        return $response;
    }

    /**
     * Operation updatePaymentWithHttpInfo
     *
     * Update payment history
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\PaymentHistory[] $paymentHistory Payment history object that you would like to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\Billingo\Model\PaymentHistory[]|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\SubscriptionErrorResponse|\Cone\Billingo\Model\ClientErrorResponse|\Cone\Billingo\Model\ValidationErrorResponse|\Cone\Billingo\Model\TooManyRequestsResponse|\Cone\Billingo\Model\ServerErrorResponse|\Cone\Billingo\Model\ClientErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentWithHttpInfo(
        int $id,
        array $paymentHistory,
        string $contentType = self::contentTypes['updatePayment'][0]
    ): array {
        $request = $this->updatePaymentRequest($id, $paymentHistory, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\PaymentHistory[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\Billingo\Model\PaymentHistory[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\PaymentHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\SubscriptionErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ValidationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\TooManyRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\Billingo\Model\ClientErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePaymentAsync
     *
     * Update payment history
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\PaymentHistory[] $paymentHistory Payment history object that you would like to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePaymentAsync(
        int $id,
        array $paymentHistory,
        string $contentType = self::contentTypes['updatePayment'][0]
    ): PromiseInterface {
        return $this->updatePaymentAsyncWithHttpInfo($id, $paymentHistory, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentAsyncWithHttpInfo
     *
     * Update payment history
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\PaymentHistory[] $paymentHistory Payment history object that you would like to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updatePaymentAsyncWithHttpInfo(
        int $id,
        array $paymentHistory,
        string $contentType = self::contentTypes['updatePayment'][0]
    ): PromiseInterface {
        $returnType = '\Cone\Billingo\Model\PaymentHistory[]';
        $request = $this->updatePaymentRequest($id, $paymentHistory, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePayment'
     *
     * @param  int $id (required)
     * @param  \Cone\Billingo\Model\PaymentHistory[] $paymentHistory Payment history object that you would like to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePaymentRequest(
        int $id,
        array $paymentHistory,
        string $contentType = self::contentTypes['updatePayment'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling updatePayment'
            );
        }

        // verify the required parameter 'paymentHistory' is set
        if ($paymentHistory === null || (is_array($paymentHistory) && count($paymentHistory) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $paymentHistory when calling updatePayment'
            );
        }


        $resourcePath = '/documents/{id}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($paymentHistory)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($paymentHistory));
            } else {
                $httpBody = $paymentHistory;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if (in_array($dataType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders(),
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
