<?php
/**
 * DocumentBlockSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billingo API v3
 *
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.15
 * Contact: hello@billingo.hu
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\Billingo\Model;

use ArrayAccess;
use Cone\Billingo\ObjectSerializer;

/**
 * DocumentBlockSchema Class Doc Comment
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentBlockSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'DocumentBlockSchema';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'prefix' => 'string',
        'type' => '\Cone\Billingo\Model\DocumentBlockType',
        'customField1' => 'string',
        'customField2' => 'string',
        'templateId' => 'int',
        'picPath' => 'string',
        'normalNotificationId' => 'int',
        'proformaNotificationId' => 'int',
        'generated' => 'bool',
        'invoiceNumberFormat' => '\Cone\Billingo\Model\InvoiceNumberFormat',
        'senderEmail' => 'string',
        'senderName' => 'string',
        'bccEmail' => 'string',
        'createInvoiceFromPaidProforma' => 'bool',
        'fulfillmentDateFromProformaPaymentDate' => 'bool',
        'attachXmlToInvoicePdf' => 'bool',
        'advancePaidInstant' => 'bool',
        'financialFulfillmentHighlight' => '\Cone\Billingo\Model\FinancialFulfillmentHighlight',
        'entitlementsInDocumentComment' => 'bool',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'prefix' => null,
        'type' => null,
        'customField1' => null,
        'customField2' => null,
        'templateId' => null,
        'picPath' => null,
        'normalNotificationId' => null,
        'proformaNotificationId' => null,
        'generated' => null,
        'invoiceNumberFormat' => null,
        'senderEmail' => 'email',
        'senderName' => null,
        'bccEmail' => 'email',
        'createInvoiceFromPaidProforma' => null,
        'fulfillmentDateFromProformaPaymentDate' => null,
        'attachXmlToInvoicePdf' => null,
        'advancePaidInstant' => null,
        'financialFulfillmentHighlight' => null,
        'entitlementsInDocumentComment' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'prefix' => false,
        'type' => false,
        'customField1' => true,
        'customField2' => true,
        'templateId' => false,
        'picPath' => false,
        'normalNotificationId' => false,
        'proformaNotificationId' => false,
        'generated' => false,
        'invoiceNumberFormat' => false,
        'senderEmail' => true,
        'senderName' => false,
        'bccEmail' => true,
        'createInvoiceFromPaidProforma' => false,
        'fulfillmentDateFromProformaPaymentDate' => false,
        'attachXmlToInvoicePdf' => false,
        'advancePaidInstant' => false,
        'financialFulfillmentHighlight' => false,
        'entitlementsInDocumentComment' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'prefix' => 'prefix',
        'type' => 'type',
        'customField1' => 'custom_field1',
        'customField2' => 'custom_field2',
        'templateId' => 'template_id',
        'picPath' => 'pic_path',
        'normalNotificationId' => 'normal_notification_id',
        'proformaNotificationId' => 'proforma_notification_id',
        'generated' => 'generated',
        'invoiceNumberFormat' => 'invoice_number_format',
        'senderEmail' => 'sender_email',
        'senderName' => 'sender_name',
        'bccEmail' => 'bcc_email',
        'createInvoiceFromPaidProforma' => 'create_invoice_from_paid_proforma',
        'fulfillmentDateFromProformaPaymentDate' => 'fulfillment_date_from_proforma_payment_date',
        'attachXmlToInvoicePdf' => 'attach_xml_to_invoice_pdf',
        'advancePaidInstant' => 'advance_paid_instant',
        'financialFulfillmentHighlight' => 'financial_fulfillment_highlight',
        'entitlementsInDocumentComment' => 'entitlements_in_document_comment',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'prefix' => 'setPrefix',
        'type' => 'setType',
        'customField1' => 'setCustomField1',
        'customField2' => 'setCustomField2',
        'templateId' => 'setTemplateId',
        'picPath' => 'setPicPath',
        'normalNotificationId' => 'setNormalNotificationId',
        'proformaNotificationId' => 'setProformaNotificationId',
        'generated' => 'setGenerated',
        'invoiceNumberFormat' => 'setInvoiceNumberFormat',
        'senderEmail' => 'setSenderEmail',
        'senderName' => 'setSenderName',
        'bccEmail' => 'setBccEmail',
        'createInvoiceFromPaidProforma' => 'setCreateInvoiceFromPaidProforma',
        'fulfillmentDateFromProformaPaymentDate' => 'setFulfillmentDateFromProformaPaymentDate',
        'attachXmlToInvoicePdf' => 'setAttachXmlToInvoicePdf',
        'advancePaidInstant' => 'setAdvancePaidInstant',
        'financialFulfillmentHighlight' => 'setFinancialFulfillmentHighlight',
        'entitlementsInDocumentComment' => 'setEntitlementsInDocumentComment',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'prefix' => 'getPrefix',
        'type' => 'getType',
        'customField1' => 'getCustomField1',
        'customField2' => 'getCustomField2',
        'templateId' => 'getTemplateId',
        'picPath' => 'getPicPath',
        'normalNotificationId' => 'getNormalNotificationId',
        'proformaNotificationId' => 'getProformaNotificationId',
        'generated' => 'getGenerated',
        'invoiceNumberFormat' => 'getInvoiceNumberFormat',
        'senderEmail' => 'getSenderEmail',
        'senderName' => 'getSenderName',
        'bccEmail' => 'getBccEmail',
        'createInvoiceFromPaidProforma' => 'getCreateInvoiceFromPaidProforma',
        'fulfillmentDateFromProformaPaymentDate' => 'getFulfillmentDateFromProformaPaymentDate',
        'attachXmlToInvoicePdf' => 'getAttachXmlToInvoicePdf',
        'advancePaidInstant' => 'getAdvancePaidInstant',
        'financialFulfillmentHighlight' => 'getFinancialFulfillmentHighlight',
        'entitlementsInDocumentComment' => 'getEntitlementsInDocumentComment',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('customField1', $data ?? [], null);
        $this->setIfExists('customField2', $data ?? [], null);
        $this->setIfExists('templateId', $data ?? [], null);
        $this->setIfExists('picPath', $data ?? [], null);
        $this->setIfExists('normalNotificationId', $data ?? [], null);
        $this->setIfExists('proformaNotificationId', $data ?? [], null);
        $this->setIfExists('generated', $data ?? [], false);
        $this->setIfExists('invoiceNumberFormat', $data ?? [], null);
        $this->setIfExists('senderEmail', $data ?? [], null);
        $this->setIfExists('senderName', $data ?? [], null);
        $this->setIfExists('bccEmail', $data ?? [], null);
        $this->setIfExists('createInvoiceFromPaidProforma', $data ?? [], null);
        $this->setIfExists('fulfillmentDateFromProformaPaymentDate', $data ?? [], null);
        $this->setIfExists('attachXmlToInvoicePdf', $data ?? [], null);
        $this->setIfExists('advancePaidInstant', $data ?? [], null);
        $this->setIfExists('financialFulfillmentHighlight', $data ?? [], null);
        $this->setIfExists('entitlementsInDocumentComment', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            throw new \InvalidArgumentException('non-nullable prefix cannot be null');
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Cone\Billingo\Model\DocumentBlockType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Cone\Billingo\Model\DocumentBlockType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets customField1
     *
     * @return string|null
     */
    public function getCustomField1()
    {
        return $this->container['customField1'];
    }

    /**
     * Sets customField1
     *
     * @param string|null $customField1 customField1
     *
     * @return self
     */
    public function setCustomField1($customField1)
    {
        if (is_null($customField1)) {
            array_push($this->openAPINullablesSetToNull, 'customField1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customField1', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customField1'] = $customField1;

        return $this;
    }

    /**
     * Gets customField2
     *
     * @return string|null
     */
    public function getCustomField2()
    {
        return $this->container['customField2'];
    }

    /**
     * Sets customField2
     *
     * @param string|null $customField2 customField2
     *
     * @return self
     */
    public function setCustomField2($customField2)
    {
        if (is_null($customField2)) {
            array_push($this->openAPINullablesSetToNull, 'customField2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customField2', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customField2'] = $customField2;

        return $this;
    }

    /**
     * Gets templateId
     *
     * @return int|null
     */
    public function getTemplateId()
    {
        return $this->container['templateId'];
    }

    /**
     * Sets templateId
     *
     * @param int|null $templateId templateId
     *
     * @return self
     */
    public function setTemplateId($templateId)
    {
        if (is_null($templateId)) {
            throw new \InvalidArgumentException('non-nullable templateId cannot be null');
        }
        $this->container['templateId'] = $templateId;

        return $this;
    }

    /**
     * Gets picPath
     *
     * @return string|null
     */
    public function getPicPath()
    {
        return $this->container['picPath'];
    }

    /**
     * Sets picPath
     *
     * @param string|null $picPath picPath
     *
     * @return self
     */
    public function setPicPath($picPath)
    {
        if (is_null($picPath)) {
            throw new \InvalidArgumentException('non-nullable picPath cannot be null');
        }
        $this->container['picPath'] = $picPath;

        return $this;
    }

    /**
     * Gets normalNotificationId
     *
     * @return int|null
     */
    public function getNormalNotificationId()
    {
        return $this->container['normalNotificationId'];
    }

    /**
     * Sets normalNotificationId
     *
     * @param int|null $normalNotificationId normalNotificationId
     *
     * @return self
     */
    public function setNormalNotificationId($normalNotificationId)
    {
        if (is_null($normalNotificationId)) {
            throw new \InvalidArgumentException('non-nullable normalNotificationId cannot be null');
        }
        $this->container['normalNotificationId'] = $normalNotificationId;

        return $this;
    }

    /**
     * Gets proformaNotificationId
     *
     * @return int|null
     */
    public function getProformaNotificationId()
    {
        return $this->container['proformaNotificationId'];
    }

    /**
     * Sets proformaNotificationId
     *
     * @param int|null $proformaNotificationId proformaNotificationId
     *
     * @return self
     */
    public function setProformaNotificationId($proformaNotificationId)
    {
        if (is_null($proformaNotificationId)) {
            throw new \InvalidArgumentException('non-nullable proformaNotificationId cannot be null');
        }
        $this->container['proformaNotificationId'] = $proformaNotificationId;

        return $this;
    }

    /**
     * Gets generated
     *
     * @return bool|null
     */
    public function getGenerated()
    {
        return $this->container['generated'];
    }

    /**
     * Sets generated
     *
     * @param bool|null $generated generated
     *
     * @return self
     */
    public function setGenerated($generated)
    {
        if (is_null($generated)) {
            throw new \InvalidArgumentException('non-nullable generated cannot be null');
        }
        $this->container['generated'] = $generated;

        return $this;
    }

    /**
     * Gets invoiceNumberFormat
     *
     * @return \Cone\Billingo\Model\InvoiceNumberFormat|null
     */
    public function getInvoiceNumberFormat()
    {
        return $this->container['invoiceNumberFormat'];
    }

    /**
     * Sets invoiceNumberFormat
     *
     * @param \Cone\Billingo\Model\InvoiceNumberFormat|null $invoiceNumberFormat invoiceNumberFormat
     *
     * @return self
     */
    public function setInvoiceNumberFormat($invoiceNumberFormat)
    {
        if (is_null($invoiceNumberFormat)) {
            throw new \InvalidArgumentException('non-nullable invoiceNumberFormat cannot be null');
        }
        $this->container['invoiceNumberFormat'] = $invoiceNumberFormat;

        return $this;
    }

    /**
     * Gets senderEmail
     *
     * @return string|null
     */
    public function getSenderEmail()
    {
        return $this->container['senderEmail'];
    }

    /**
     * Sets senderEmail
     *
     * @param string|null $senderEmail senderEmail
     *
     * @return self
     */
    public function setSenderEmail($senderEmail)
    {
        if (is_null($senderEmail)) {
            array_push($this->openAPINullablesSetToNull, 'senderEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('senderEmail', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['senderEmail'] = $senderEmail;

        return $this;
    }

    /**
     * Gets senderName
     *
     * @return string|null
     */
    public function getSenderName()
    {
        return $this->container['senderName'];
    }

    /**
     * Sets senderName
     *
     * @param string|null $senderName senderName
     *
     * @return self
     */
    public function setSenderName($senderName)
    {
        if (is_null($senderName)) {
            throw new \InvalidArgumentException('non-nullable senderName cannot be null');
        }
        $this->container['senderName'] = $senderName;

        return $this;
    }

    /**
     * Gets bccEmail
     *
     * @return string|null
     */
    public function getBccEmail()
    {
        return $this->container['bccEmail'];
    }

    /**
     * Sets bccEmail
     *
     * @param string|null $bccEmail bccEmail
     *
     * @return self
     */
    public function setBccEmail($bccEmail)
    {
        if (is_null($bccEmail)) {
            array_push($this->openAPINullablesSetToNull, 'bccEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bccEmail', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bccEmail'] = $bccEmail;

        return $this;
    }

    /**
     * Gets createInvoiceFromPaidProforma
     *
     * @return bool|null
     */
    public function getCreateInvoiceFromPaidProforma()
    {
        return $this->container['createInvoiceFromPaidProforma'];
    }

    /**
     * Sets createInvoiceFromPaidProforma
     *
     * @param bool|null $createInvoiceFromPaidProforma createInvoiceFromPaidProforma
     *
     * @return self
     */
    public function setCreateInvoiceFromPaidProforma($createInvoiceFromPaidProforma)
    {
        if (is_null($createInvoiceFromPaidProforma)) {
            throw new \InvalidArgumentException('non-nullable createInvoiceFromPaidProforma cannot be null');
        }
        $this->container['createInvoiceFromPaidProforma'] = $createInvoiceFromPaidProforma;

        return $this;
    }

    /**
     * Gets fulfillmentDateFromProformaPaymentDate
     *
     * @return bool|null
     */
    public function getFulfillmentDateFromProformaPaymentDate()
    {
        return $this->container['fulfillmentDateFromProformaPaymentDate'];
    }

    /**
     * Sets fulfillmentDateFromProformaPaymentDate
     *
     * @param bool|null $fulfillmentDateFromProformaPaymentDate fulfillmentDateFromProformaPaymentDate
     *
     * @return self
     */
    public function setFulfillmentDateFromProformaPaymentDate($fulfillmentDateFromProformaPaymentDate)
    {
        if (is_null($fulfillmentDateFromProformaPaymentDate)) {
            throw new \InvalidArgumentException('non-nullable fulfillmentDateFromProformaPaymentDate cannot be null');
        }
        $this->container['fulfillmentDateFromProformaPaymentDate'] = $fulfillmentDateFromProformaPaymentDate;

        return $this;
    }

    /**
     * Gets attachXmlToInvoicePdf
     *
     * @return bool|null
     */
    public function getAttachXmlToInvoicePdf()
    {
        return $this->container['attachXmlToInvoicePdf'];
    }

    /**
     * Sets attachXmlToInvoicePdf
     *
     * @param bool|null $attachXmlToInvoicePdf attachXmlToInvoicePdf
     *
     * @return self
     */
    public function setAttachXmlToInvoicePdf($attachXmlToInvoicePdf)
    {
        if (is_null($attachXmlToInvoicePdf)) {
            throw new \InvalidArgumentException('non-nullable attachXmlToInvoicePdf cannot be null');
        }
        $this->container['attachXmlToInvoicePdf'] = $attachXmlToInvoicePdf;

        return $this;
    }

    /**
     * Gets advancePaidInstant
     *
     * @return bool|null
     */
    public function getAdvancePaidInstant()
    {
        return $this->container['advancePaidInstant'];
    }

    /**
     * Sets advancePaidInstant
     *
     * @param bool|null $advancePaidInstant advancePaidInstant
     *
     * @return self
     */
    public function setAdvancePaidInstant($advancePaidInstant)
    {
        if (is_null($advancePaidInstant)) {
            throw new \InvalidArgumentException('non-nullable advancePaidInstant cannot be null');
        }
        $this->container['advancePaidInstant'] = $advancePaidInstant;

        return $this;
    }

    /**
     * Gets financialFulfillmentHighlight
     *
     * @return \Cone\Billingo\Model\FinancialFulfillmentHighlight|null
     */
    public function getFinancialFulfillmentHighlight()
    {
        return $this->container['financialFulfillmentHighlight'];
    }

    /**
     * Sets financialFulfillmentHighlight
     *
     * @param \Cone\Billingo\Model\FinancialFulfillmentHighlight|null $financialFulfillmentHighlight financialFulfillmentHighlight
     *
     * @return self
     */
    public function setFinancialFulfillmentHighlight($financialFulfillmentHighlight)
    {
        if (is_null($financialFulfillmentHighlight)) {
            throw new \InvalidArgumentException('non-nullable financialFulfillmentHighlight cannot be null');
        }
        $this->container['financialFulfillmentHighlight'] = $financialFulfillmentHighlight;

        return $this;
    }

    /**
     * Gets entitlementsInDocumentComment
     *
     * @return bool|null
     */
    public function getEntitlementsInDocumentComment()
    {
        return $this->container['entitlementsInDocumentComment'];
    }

    /**
     * Sets entitlementsInDocumentComment
     *
     * @param bool|null $entitlementsInDocumentComment entitlementsInDocumentComment
     *
     * @return self
     */
    public function setEntitlementsInDocumentComment($entitlementsInDocumentComment)
    {
        if (is_null($entitlementsInDocumentComment)) {
            throw new \InvalidArgumentException('non-nullable entitlementsInDocumentComment cannot be null');
        }
        $this->container['entitlementsInDocumentComment'] = $entitlementsInDocumentComment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
