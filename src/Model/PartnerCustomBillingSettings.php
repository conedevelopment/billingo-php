<?php

/**
 * PartnerCustomBillingSettings
 *
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billingo API v3
 *
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\Billingo\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Cone\Billingo\ObjectSerializer;

/**
 * PartnerCustomBillingSettings Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PartnerCustomBillingSettings implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'PartnerCustomBillingSettings';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = [
        'paymentMethod' => '\Cone\Billingo\Model\PaymentMethod',
        'documentForm' => '\Cone\Billingo\Model\DocumentForm',
        'dueDays' => 'int',
        'documentCurrency' => '\Cone\Billingo\Model\Currency',
        'templateLanguageCode' => '\Cone\Billingo\Model\DocumentLanguage',
        'discount' => '\Cone\Billingo\Model\Discount',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'paymentMethod' => null,
        'documentForm' => null,
        'dueDays' => null,
        'documentCurrency' => null,
        'templateLanguageCode' => null,
        'discount' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = [
        'paymentMethod' => false,
        'documentForm' => false,
        'dueDays' => false,
        'documentCurrency' => false,
        'templateLanguageCode' => false,
        'discount' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'paymentMethod' => 'payment_method',
        'documentForm' => 'document_form',
        'dueDays' => 'due_days',
        'documentCurrency' => 'document_currency',
        'templateLanguageCode' => 'template_language_code',
        'discount' => 'discount',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'paymentMethod' => 'setPaymentMethod',
        'documentForm' => 'setDocumentForm',
        'dueDays' => 'setDueDays',
        'documentCurrency' => 'setDocumentCurrency',
        'templateLanguageCode' => 'setTemplateLanguageCode',
        'discount' => 'setDiscount',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'paymentMethod' => 'getPaymentMethod',
        'documentForm' => 'getDocumentForm',
        'dueDays' => 'getDueDays',
        'documentCurrency' => 'getDocumentCurrency',
        'templateLanguageCode' => 'getTemplateLanguageCode',
        'discount' => 'getDiscount',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('documentForm', $data ?? [], null);
        $this->setIfExists('dueDays', $data ?? [], null);
        $this->setIfExists('documentCurrency', $data ?? [], null);
        $this->setIfExists('templateLanguageCode', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paymentMethod
     *
     * @return \Cone\Billingo\Model\PaymentMethod|null
     */
    public function getPaymentMethod(): ?\Cone\Billingo\Model\PaymentMethod
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param \Cone\Billingo\Model\PaymentMethod|null $paymentMethod paymentMethod
     *
     * @return $this
     */
    public function setPaymentMethod(?\Cone\Billingo\Model\PaymentMethod $paymentMethod): static
    {
        if (is_null($paymentMethod)) {
            throw new InvalidArgumentException('non-nullable paymentMethod cannot be null');
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets documentForm
     *
     * @return \Cone\Billingo\Model\DocumentForm|null
     */
    public function getDocumentForm(): ?\Cone\Billingo\Model\DocumentForm
    {
        return $this->container['documentForm'];
    }

    /**
     * Sets documentForm
     *
     * @param \Cone\Billingo\Model\DocumentForm|null $documentForm documentForm
     *
     * @return $this
     */
    public function setDocumentForm(?\Cone\Billingo\Model\DocumentForm $documentForm): static
    {
        if (is_null($documentForm)) {
            throw new InvalidArgumentException('non-nullable documentForm cannot be null');
        }
        $this->container['documentForm'] = $documentForm;

        return $this;
    }

    /**
     * Gets dueDays
     *
     * @return int|null
     */
    public function getDueDays(): ?int
    {
        return $this->container['dueDays'];
    }

    /**
     * Sets dueDays
     *
     * @param int|null $dueDays dueDays
     *
     * @return $this
     */
    public function setDueDays(?int $dueDays): static
    {
        if (is_null($dueDays)) {
            throw new InvalidArgumentException('non-nullable dueDays cannot be null');
        }
        $this->container['dueDays'] = $dueDays;

        return $this;
    }

    /**
     * Gets documentCurrency
     *
     * @return \Cone\Billingo\Model\Currency|null
     */
    public function getDocumentCurrency(): ?\Cone\Billingo\Model\Currency
    {
        return $this->container['documentCurrency'];
    }

    /**
     * Sets documentCurrency
     *
     * @param \Cone\Billingo\Model\Currency|null $documentCurrency documentCurrency
     *
     * @return $this
     */
    public function setDocumentCurrency(?\Cone\Billingo\Model\Currency $documentCurrency): static
    {
        if (is_null($documentCurrency)) {
            throw new InvalidArgumentException('non-nullable documentCurrency cannot be null');
        }
        $this->container['documentCurrency'] = $documentCurrency;

        return $this;
    }

    /**
     * Gets templateLanguageCode
     *
     * @return \Cone\Billingo\Model\DocumentLanguage|null
     */
    public function getTemplateLanguageCode(): ?\Cone\Billingo\Model\DocumentLanguage
    {
        return $this->container['templateLanguageCode'];
    }

    /**
     * Sets templateLanguageCode
     *
     * @param \Cone\Billingo\Model\DocumentLanguage|null $templateLanguageCode templateLanguageCode
     *
     * @return $this
     */
    public function setTemplateLanguageCode(?\Cone\Billingo\Model\DocumentLanguage $templateLanguageCode): static
    {
        if (is_null($templateLanguageCode)) {
            throw new InvalidArgumentException('non-nullable templateLanguageCode cannot be null');
        }
        $this->container['templateLanguageCode'] = $templateLanguageCode;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \Cone\Billingo\Model\Discount|null
     */
    public function getDiscount(): ?\Cone\Billingo\Model\Discount
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \Cone\Billingo\Model\Discount|null $discount discount
     *
     * @return $this
     */
    public function setDiscount(?\Cone\Billingo\Model\Discount $discount): static
    {
        if (is_null($discount)) {
            throw new InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
