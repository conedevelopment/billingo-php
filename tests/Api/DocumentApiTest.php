<?php
/**
 * DocumentApiTest
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billingo API v3
 *
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Cone\Billingo\Test\Api;

use Cone\Billingo\Configuration;
use Cone\Billingo\ApiException;
use Cone\Billingo\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DocumentApiTest Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentApiTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for archiveDocument
     *
     * Archive a proforma document..
     *
     */
    public function testArchiveDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cancelDocument
     *
     * Cancel a document.
     *
     */
    public function testCancelDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDocument
     *
     * Create a document.
     *
     */
    public function testCreateDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDocumentFromDraft
     *
     * Converts a draft to an invoice..
     *
     */
    public function testCreateDocumentFromDraft()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDocumentFromProforma
     *
     * Create a document from proforma..
     *
     */
    public function testCreateDocumentFromProforma()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createModificationDocument
     *
     * Create a modification document..
     *
     */
    public function testCreateModificationDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createReceipt
     *
     * Create a receipt.
     *
     */
    public function testCreateReceipt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createReceiptFromDraft
     *
     * Converts a draft to a receipt..
     *
     */
    public function testCreateReceiptFromDraft()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteDocument
     *
     * Delete a draft..
     *
     */
    public function testDeleteDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deletePayment
     *
     * Delete all payment history on document.
     *
     */
    public function testDeletePayment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for documentCopy
     *
     * Copy a document.
     *
     */
    public function testDocumentCopy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadDocument
     *
     * Download a document in PDF format..
     *
     */
    public function testDownloadDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDocument
     *
     * Retrieve a document.
     *
     */
    public function testGetDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDocumentByVendorId
     *
     * Retrieve a document by vendor id.
     *
     */
    public function testGetDocumentByVendorId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOnlineSzamlaStatus
     *
     * Retrieve a document Online Számla status.
     *
     */
    public function testGetOnlineSzamlaStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPayment
     *
     * Retrieve a payment histroy.
     *
     */
    public function testGetPayment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPublicUrl
     *
     * Retrieve a document download public url..
     *
     */
    public function testGetPublicUrl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listDocument
     *
     * List all documents.
     *
     */
    public function testListDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for posPrint
     *
     * Returns a printable POS PDF.
     *
     */
    public function testPosPrint()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendDocument
     *
     * Send invoice to given email adresses..
     *
     */
    public function testSendDocument()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePayment
     *
     * Update payment history.
     *
     */
    public function testUpdatePayment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
