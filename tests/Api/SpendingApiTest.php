<?php

/**
 * SpendingApiTest
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billingo API v3
 *
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Cone\Billingo\Test\Api;

use Cone\Billingo\Configuration;
use Cone\Billingo\ApiException;
use Cone\Billingo\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SpendingApiTest Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SpendingApiTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for spendingDelete
     *
     * Deletes a spending..
     *
     */
    public function testSpendingDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for spendingList
     *
     * Lists all spending.
     *
     */
    public function testSpendingList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for spendingSave
     *
     * Creates a new spending..
     *
     */
    public function testSpendingSave()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for spendingShow
     *
     * Retrieves one specific spending..
     *
     */
    public function testSpendingShow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for spendingUpdate
     *
     * Updates a spending item..
     *
     */
    public function testSpendingUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
