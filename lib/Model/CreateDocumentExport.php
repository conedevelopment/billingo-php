<?php
/**
 * CreateDocumentExport
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cone\Billingo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billingo API v3
 *
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.15
 * Contact: hello@billingo.hu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\Billingo\Model;

use \ArrayAccess;
use \Cone\Billingo\ObjectSerializer;

/**
 * CreateDocumentExport Class Doc Comment
 *
 * @category Class
 * @package  Cone\Billingo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDocumentExport implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateDocumentExport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'query_type' => '\Cone\Billingo\Model\DocumentExportQueryType',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'document_block_id' => 'int',
        'export_type' => '\Cone\Billingo\Model\DocumentExportType',
        'number_start_year' => 'int',
        'number_start_sequence' => 'int',
        'number_end_year' => 'int',
        'number_end_sequence' => 'int',
        'payment_method' => '\Cone\Billingo\Model\PaymentMethod',
        'sort_by' => '\Cone\Billingo\Model\DocumentExportSortBy',
        'other_options' => '\Cone\Billingo\Model\DocumentExportOtherOptions',
        'filter_extra' => '\Cone\Billingo\Model\DocumentExportFilterExtra'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'query_type' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'document_block_id' => null,
        'export_type' => null,
        'number_start_year' => null,
        'number_start_sequence' => null,
        'number_end_year' => null,
        'number_end_sequence' => null,
        'payment_method' => null,
        'sort_by' => null,
        'other_options' => null,
        'filter_extra' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'query_type' => false,
		'start_date' => false,
		'end_date' => false,
		'document_block_id' => false,
		'export_type' => false,
		'number_start_year' => false,
		'number_start_sequence' => false,
		'number_end_year' => false,
		'number_end_sequence' => false,
		'payment_method' => false,
		'sort_by' => false,
		'other_options' => false,
		'filter_extra' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'query_type' => 'query_type',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'document_block_id' => 'document_block_id',
        'export_type' => 'export_type',
        'number_start_year' => 'number_start_year',
        'number_start_sequence' => 'number_start_sequence',
        'number_end_year' => 'number_end_year',
        'number_end_sequence' => 'number_end_sequence',
        'payment_method' => 'payment_method',
        'sort_by' => 'sort_by',
        'other_options' => 'other_options',
        'filter_extra' => 'filter_extra'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'query_type' => 'setQueryType',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'document_block_id' => 'setDocumentBlockId',
        'export_type' => 'setExportType',
        'number_start_year' => 'setNumberStartYear',
        'number_start_sequence' => 'setNumberStartSequence',
        'number_end_year' => 'setNumberEndYear',
        'number_end_sequence' => 'setNumberEndSequence',
        'payment_method' => 'setPaymentMethod',
        'sort_by' => 'setSortBy',
        'other_options' => 'setOtherOptions',
        'filter_extra' => 'setFilterExtra'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'query_type' => 'getQueryType',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'document_block_id' => 'getDocumentBlockId',
        'export_type' => 'getExportType',
        'number_start_year' => 'getNumberStartYear',
        'number_start_sequence' => 'getNumberStartSequence',
        'number_end_year' => 'getNumberEndYear',
        'number_end_sequence' => 'getNumberEndSequence',
        'payment_method' => 'getPaymentMethod',
        'sort_by' => 'getSortBy',
        'other_options' => 'getOtherOptions',
        'filter_extra' => 'getFilterExtra'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('query_type', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('document_block_id', $data ?? [], null);
        $this->setIfExists('export_type', $data ?? [], null);
        $this->setIfExists('number_start_year', $data ?? [], null);
        $this->setIfExists('number_start_sequence', $data ?? [], null);
        $this->setIfExists('number_end_year', $data ?? [], null);
        $this->setIfExists('number_end_sequence', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('sort_by', $data ?? [], null);
        $this->setIfExists('other_options', $data ?? [], null);
        $this->setIfExists('filter_extra', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['query_type'] === null) {
            $invalidProperties[] = "'query_type' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['export_type'] === null) {
            $invalidProperties[] = "'export_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets query_type
     *
     * @return \Cone\Billingo\Model\DocumentExportQueryType
     */
    public function getQueryType()
    {
        return $this->container['query_type'];
    }

    /**
     * Sets query_type
     *
     * @param \Cone\Billingo\Model\DocumentExportQueryType $query_type query_type
     *
     * @return self
     */
    public function setQueryType($query_type)
    {
        if (is_null($query_type)) {
            throw new \InvalidArgumentException('non-nullable query_type cannot be null');
        }
        $this->container['query_type'] = $query_type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets document_block_id
     *
     * @return int|null
     */
    public function getDocumentBlockId()
    {
        return $this->container['document_block_id'];
    }

    /**
     * Sets document_block_id
     *
     * @param int|null $document_block_id document_block_id
     *
     * @return self
     */
    public function setDocumentBlockId($document_block_id)
    {
        if (is_null($document_block_id)) {
            throw new \InvalidArgumentException('non-nullable document_block_id cannot be null');
        }
        $this->container['document_block_id'] = $document_block_id;

        return $this;
    }

    /**
     * Gets export_type
     *
     * @return \Cone\Billingo\Model\DocumentExportType
     */
    public function getExportType()
    {
        return $this->container['export_type'];
    }

    /**
     * Sets export_type
     *
     * @param \Cone\Billingo\Model\DocumentExportType $export_type export_type
     *
     * @return self
     */
    public function setExportType($export_type)
    {
        if (is_null($export_type)) {
            throw new \InvalidArgumentException('non-nullable export_type cannot be null');
        }
        $this->container['export_type'] = $export_type;

        return $this;
    }

    /**
     * Gets number_start_year
     *
     * @return int|null
     */
    public function getNumberStartYear()
    {
        return $this->container['number_start_year'];
    }

    /**
     * Sets number_start_year
     *
     * @param int|null $number_start_year number_start_year
     *
     * @return self
     */
    public function setNumberStartYear($number_start_year)
    {
        if (is_null($number_start_year)) {
            throw new \InvalidArgumentException('non-nullable number_start_year cannot be null');
        }
        $this->container['number_start_year'] = $number_start_year;

        return $this;
    }

    /**
     * Gets number_start_sequence
     *
     * @return int|null
     */
    public function getNumberStartSequence()
    {
        return $this->container['number_start_sequence'];
    }

    /**
     * Sets number_start_sequence
     *
     * @param int|null $number_start_sequence number_start_sequence
     *
     * @return self
     */
    public function setNumberStartSequence($number_start_sequence)
    {
        if (is_null($number_start_sequence)) {
            throw new \InvalidArgumentException('non-nullable number_start_sequence cannot be null');
        }
        $this->container['number_start_sequence'] = $number_start_sequence;

        return $this;
    }

    /**
     * Gets number_end_year
     *
     * @return int|null
     */
    public function getNumberEndYear()
    {
        return $this->container['number_end_year'];
    }

    /**
     * Sets number_end_year
     *
     * @param int|null $number_end_year number_end_year
     *
     * @return self
     */
    public function setNumberEndYear($number_end_year)
    {
        if (is_null($number_end_year)) {
            throw new \InvalidArgumentException('non-nullable number_end_year cannot be null');
        }
        $this->container['number_end_year'] = $number_end_year;

        return $this;
    }

    /**
     * Gets number_end_sequence
     *
     * @return int|null
     */
    public function getNumberEndSequence()
    {
        return $this->container['number_end_sequence'];
    }

    /**
     * Sets number_end_sequence
     *
     * @param int|null $number_end_sequence number_end_sequence
     *
     * @return self
     */
    public function setNumberEndSequence($number_end_sequence)
    {
        if (is_null($number_end_sequence)) {
            throw new \InvalidArgumentException('non-nullable number_end_sequence cannot be null');
        }
        $this->container['number_end_sequence'] = $number_end_sequence;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \Cone\Billingo\Model\PaymentMethod|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \Cone\Billingo\Model\PaymentMethod|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return \Cone\Billingo\Model\DocumentExportSortBy|null
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param \Cone\Billingo\Model\DocumentExportSortBy|null $sort_by sort_by
     *
     * @return self
     */
    public function setSortBy($sort_by)
    {
        if (is_null($sort_by)) {
            throw new \InvalidArgumentException('non-nullable sort_by cannot be null');
        }
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets other_options
     *
     * @return \Cone\Billingo\Model\DocumentExportOtherOptions|null
     */
    public function getOtherOptions()
    {
        return $this->container['other_options'];
    }

    /**
     * Sets other_options
     *
     * @param \Cone\Billingo\Model\DocumentExportOtherOptions|null $other_options other_options
     *
     * @return self
     */
    public function setOtherOptions($other_options)
    {
        if (is_null($other_options)) {
            throw new \InvalidArgumentException('non-nullable other_options cannot be null');
        }
        $this->container['other_options'] = $other_options;

        return $this;
    }

    /**
     * Gets filter_extra
     *
     * @return \Cone\Billingo\Model\DocumentExportFilterExtra|null
     */
    public function getFilterExtra()
    {
        return $this->container['filter_extra'];
    }

    /**
     * Sets filter_extra
     *
     * @param \Cone\Billingo\Model\DocumentExportFilterExtra|null $filter_extra filter_extra
     *
     * @return self
     */
    public function setFilterExtra($filter_extra)
    {
        if (is_null($filter_extra)) {
            throw new \InvalidArgumentException('non-nullable filter_extra cannot be null');
        }
        $this->container['filter_extra'] = $filter_extra;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


