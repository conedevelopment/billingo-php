<?php
/**
 * DocumentSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cone\Billingo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billingo API v3
 *
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.15
 * Contact: hello@billingo.hu
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\Billingo\Model;

use \ArrayAccess;
use \Cone\Billingo\ObjectSerializer;

/**
 * DocumentSettings Class Doc Comment
 *
 * @category Class
 * @package  Cone\Billingo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mediated_service' => 'bool',
        'without_financial_fulfillment' => 'bool',
        'online_payment' => '\Cone\Billingo\Model\OnlinePayment',
        'should_send_email' => 'bool',
        'round' => '\Cone\Billingo\Model\Round',
        'no_send_onlineszamla_by_user' => 'bool',
        'dont_send_to_nav_reason' => '\Cone\Billingo\Model\DocumentSettingsDontSendToNavReason',
        'order_number' => 'string',
        'place_id' => 'int',
        'instant_payment' => 'bool',
        'selected_type' => '\Cone\Billingo\Model\DocumentType',
        'instant_payment_request' => '\Cone\Billingo\Model\DocumentInsertInstantPaymentRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mediated_service' => null,
        'without_financial_fulfillment' => null,
        'online_payment' => null,
        'should_send_email' => null,
        'round' => null,
        'no_send_onlineszamla_by_user' => null,
        'dont_send_to_nav_reason' => null,
        'order_number' => null,
        'place_id' => null,
        'instant_payment' => null,
        'selected_type' => null,
        'instant_payment_request' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mediated_service' => false,
		'without_financial_fulfillment' => false,
		'online_payment' => false,
		'should_send_email' => false,
		'round' => false,
		'no_send_onlineszamla_by_user' => false,
		'dont_send_to_nav_reason' => true,
		'order_number' => false,
		'place_id' => true,
		'instant_payment' => false,
		'selected_type' => false,
		'instant_payment_request' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mediated_service' => 'mediated_service',
        'without_financial_fulfillment' => 'without_financial_fulfillment',
        'online_payment' => 'online_payment',
        'should_send_email' => 'should_send_email',
        'round' => 'round',
        'no_send_onlineszamla_by_user' => 'no_send_onlineszamla_by_user',
        'dont_send_to_nav_reason' => 'dont_send_to_nav_reason',
        'order_number' => 'order_number',
        'place_id' => 'place_id',
        'instant_payment' => 'instant_payment',
        'selected_type' => 'selected_type',
        'instant_payment_request' => 'instant_payment_request'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mediated_service' => 'setMediatedService',
        'without_financial_fulfillment' => 'setWithoutFinancialFulfillment',
        'online_payment' => 'setOnlinePayment',
        'should_send_email' => 'setShouldSendEmail',
        'round' => 'setRound',
        'no_send_onlineszamla_by_user' => 'setNoSendOnlineszamlaByUser',
        'dont_send_to_nav_reason' => 'setDontSendToNavReason',
        'order_number' => 'setOrderNumber',
        'place_id' => 'setPlaceId',
        'instant_payment' => 'setInstantPayment',
        'selected_type' => 'setSelectedType',
        'instant_payment_request' => 'setInstantPaymentRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mediated_service' => 'getMediatedService',
        'without_financial_fulfillment' => 'getWithoutFinancialFulfillment',
        'online_payment' => 'getOnlinePayment',
        'should_send_email' => 'getShouldSendEmail',
        'round' => 'getRound',
        'no_send_onlineszamla_by_user' => 'getNoSendOnlineszamlaByUser',
        'dont_send_to_nav_reason' => 'getDontSendToNavReason',
        'order_number' => 'getOrderNumber',
        'place_id' => 'getPlaceId',
        'instant_payment' => 'getInstantPayment',
        'selected_type' => 'getSelectedType',
        'instant_payment_request' => 'getInstantPaymentRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('mediated_service', $data ?? [], false);
        $this->setIfExists('without_financial_fulfillment', $data ?? [], false);
        $this->setIfExists('online_payment', $data ?? [], null);
        $this->setIfExists('should_send_email', $data ?? [], false);
        $this->setIfExists('round', $data ?? [], null);
        $this->setIfExists('no_send_onlineszamla_by_user', $data ?? [], null);
        $this->setIfExists('dont_send_to_nav_reason', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('place_id', $data ?? [], null);
        $this->setIfExists('instant_payment', $data ?? [], null);
        $this->setIfExists('selected_type', $data ?? [], null);
        $this->setIfExists('instant_payment_request', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mediated_service
     *
     * @return bool|null
     */
    public function getMediatedService()
    {
        return $this->container['mediated_service'];
    }

    /**
     * Sets mediated_service
     *
     * @param bool|null $mediated_service mediated_service
     *
     * @return self
     */
    public function setMediatedService($mediated_service)
    {
        if (is_null($mediated_service)) {
            throw new \InvalidArgumentException('non-nullable mediated_service cannot be null');
        }
        $this->container['mediated_service'] = $mediated_service;

        return $this;
    }

    /**
     * Gets without_financial_fulfillment
     *
     * @return bool|null
     */
    public function getWithoutFinancialFulfillment()
    {
        return $this->container['without_financial_fulfillment'];
    }

    /**
     * Sets without_financial_fulfillment
     *
     * @param bool|null $without_financial_fulfillment without_financial_fulfillment
     *
     * @return self
     */
    public function setWithoutFinancialFulfillment($without_financial_fulfillment)
    {
        if (is_null($without_financial_fulfillment)) {
            throw new \InvalidArgumentException('non-nullable without_financial_fulfillment cannot be null');
        }
        $this->container['without_financial_fulfillment'] = $without_financial_fulfillment;

        return $this;
    }

    /**
     * Gets online_payment
     *
     * @return \Cone\Billingo\Model\OnlinePayment|null
     */
    public function getOnlinePayment()
    {
        return $this->container['online_payment'];
    }

    /**
     * Sets online_payment
     *
     * @param \Cone\Billingo\Model\OnlinePayment|null $online_payment online_payment
     *
     * @return self
     */
    public function setOnlinePayment($online_payment)
    {
        if (is_null($online_payment)) {
            throw new \InvalidArgumentException('non-nullable online_payment cannot be null');
        }
        $this->container['online_payment'] = $online_payment;

        return $this;
    }

    /**
     * Gets should_send_email
     *
     * @return bool|null
     */
    public function getShouldSendEmail()
    {
        return $this->container['should_send_email'];
    }

    /**
     * Sets should_send_email
     *
     * @param bool|null $should_send_email should_send_email
     *
     * @return self
     */
    public function setShouldSendEmail($should_send_email)
    {
        if (is_null($should_send_email)) {
            throw new \InvalidArgumentException('non-nullable should_send_email cannot be null');
        }
        $this->container['should_send_email'] = $should_send_email;

        return $this;
    }

    /**
     * Gets round
     *
     * @return \Cone\Billingo\Model\Round|null
     */
    public function getRound()
    {
        return $this->container['round'];
    }

    /**
     * Sets round
     *
     * @param \Cone\Billingo\Model\Round|null $round round
     *
     * @return self
     */
    public function setRound($round)
    {
        if (is_null($round)) {
            throw new \InvalidArgumentException('non-nullable round cannot be null');
        }
        $this->container['round'] = $round;

        return $this;
    }

    /**
     * Gets no_send_onlineszamla_by_user
     *
     * @return bool|null
     * @deprecated
     */
    public function getNoSendOnlineszamlaByUser()
    {
        return $this->container['no_send_onlineszamla_by_user'];
    }

    /**
     * Sets no_send_onlineszamla_by_user
     *
     * @param bool|null $no_send_onlineszamla_by_user no_send_onlineszamla_by_user
     *
     * @return self
     * @deprecated
     */
    public function setNoSendOnlineszamlaByUser($no_send_onlineszamla_by_user)
    {
        if (is_null($no_send_onlineszamla_by_user)) {
            throw new \InvalidArgumentException('non-nullable no_send_onlineszamla_by_user cannot be null');
        }
        $this->container['no_send_onlineszamla_by_user'] = $no_send_onlineszamla_by_user;

        return $this;
    }

    /**
     * Gets dont_send_to_nav_reason
     *
     * @return \Cone\Billingo\Model\DocumentSettingsDontSendToNavReason|null
     */
    public function getDontSendToNavReason()
    {
        return $this->container['dont_send_to_nav_reason'];
    }

    /**
     * Sets dont_send_to_nav_reason
     *
     * @param \Cone\Billingo\Model\DocumentSettingsDontSendToNavReason|null $dont_send_to_nav_reason dont_send_to_nav_reason
     *
     * @return self
     */
    public function setDontSendToNavReason($dont_send_to_nav_reason)
    {
        if (is_null($dont_send_to_nav_reason)) {
            array_push($this->openAPINullablesSetToNull, 'dont_send_to_nav_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dont_send_to_nav_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dont_send_to_nav_reason'] = $dont_send_to_nav_reason;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number order_number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets place_id
     *
     * @return int|null
     */
    public function getPlaceId()
    {
        return $this->container['place_id'];
    }

    /**
     * Sets place_id
     *
     * @param int|null $place_id place_id
     *
     * @return self
     */
    public function setPlaceId($place_id)
    {
        if (is_null($place_id)) {
            array_push($this->openAPINullablesSetToNull, 'place_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('place_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['place_id'] = $place_id;

        return $this;
    }

    /**
     * Gets instant_payment
     *
     * @return bool|null
     */
    public function getInstantPayment()
    {
        return $this->container['instant_payment'];
    }

    /**
     * Sets instant_payment
     *
     * @param bool|null $instant_payment instant_payment
     *
     * @return self
     */
    public function setInstantPayment($instant_payment)
    {
        if (is_null($instant_payment)) {
            throw new \InvalidArgumentException('non-nullable instant_payment cannot be null');
        }
        $this->container['instant_payment'] = $instant_payment;

        return $this;
    }

    /**
     * Gets selected_type
     *
     * @return \Cone\Billingo\Model\DocumentType|null
     */
    public function getSelectedType()
    {
        return $this->container['selected_type'];
    }

    /**
     * Sets selected_type
     *
     * @param \Cone\Billingo\Model\DocumentType|null $selected_type selected_type
     *
     * @return self
     */
    public function setSelectedType($selected_type)
    {
        if (is_null($selected_type)) {
            throw new \InvalidArgumentException('non-nullable selected_type cannot be null');
        }
        $this->container['selected_type'] = $selected_type;

        return $this;
    }

    /**
     * Gets instant_payment_request
     *
     * @return \Cone\Billingo\Model\DocumentInsertInstantPaymentRequest|null
     */
    public function getInstantPaymentRequest()
    {
        return $this->container['instant_payment_request'];
    }

    /**
     * Sets instant_payment_request
     *
     * @param \Cone\Billingo\Model\DocumentInsertInstantPaymentRequest|null $instant_payment_request instant_payment_request
     *
     * @return self
     */
    public function setInstantPaymentRequest($instant_payment_request)
    {
        if (is_null($instant_payment_request)) {
            array_push($this->openAPINullablesSetToNull, 'instant_payment_request');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instant_payment_request', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instant_payment_request'] = $instant_payment_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


